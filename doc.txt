# User Documentation: Vagrant LAMP Stack Setup with Docker Provider

## Introduction
This user documentation explains how to use the provided script, Vagrant configuration 
with Docker as the provider, and Ansible playbook to set up a LAMP (Linux, Apache, MySQL, PHP) 
stack on two Ubuntu-based servers using Vagrant for local development or testing purposes. 
The setup consists of a "Master" and a "Slave" node, and Ansible is used to automate the provisioning of the
"Slave" node.

## Table of Contents

1. **Prerequisites**
2. **Getting Started**
   - 2.1. Setting Up the Environment
   - 2.2. Running the Vagrant Configuration
3. **Using the `setup_lamp.sh` Script**
4. **Executing the Ansible Playbook**
5. **Verifying the Setup**
6. **Customization**
7. **Troubleshooting**
8. **Conclusion**

## 1. Prerequisites

Before you begin, ensure you have the following prerequisites:

- **Operating System**: This setup is tested on a Unix-like system (Linux or macOS).
- **Vagrant**: Install Vagrant on your system. You can download it from [Vagrant's official website](https://www.vagrantup.com/downloads.html).
- **VirtualBox** (or another virtualization provider): Vagrant requires a virtualization provider to create virtual machines. Install VirtualBox from [here](https://www.virtualbox.org/wiki/Downloads).
- **Docker**: Make sure Docker is installed on your system. You can download Docker Desktop from [Docker's official website](https://www.docker.com/get-started).
- **Ansible**: Install Ansible on your system using the package manager specific to your OS. You can refer to the [Ansible installation documentation](https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html) for guidance.
- **Git**: Ensure Git is installed on your system to clone the project and access necessary files.

## 2. Getting Started

### 2.1. Setting Up the Environment

1. Clone the project repository to your local machine:

   ```bash
   git clone https://github.com/yourusername/your-repo.git
   ```

2. Navigate to the project directory:

   ```bash
   cd your-repo
   ```

### 2.2. Running the Vagrant Configuration with Docker Provider

1. Inside the project directory, you will find a `Vagrantfile`.
 This file defines the configuration for the "Master" and "Slave" nodes, 
 using Docker as the provider.

2. To create and provision the virtual machines with Docker, run the following command:

   ```bash
   vagrant up --provider=docker
   ```

This command may take a few moments to set up the Docker containers based on the specified Docker images.

3. You can access the "Slave" node using SSH:

   ```bash
   vagrant ssh Slave
   ```

By specifying `--provider=docker`, you instruct Vagrant to use Docker as the provider for your virtual machines. This allows you to use Docker containers instead of traditional VMs for your development environment.

## 3. Using the `setup_lamp.sh` Script

1. The `setup_lamp.sh` script automates the installation of the LAMP stack on the "Master" node.

2. Open the script in a text editor to review and customize variables at the top of the script if needed, such as project directory and app name.

3. Make the script executable:

   ```bash
   chmod +x setup_lamp.sh
   ```

4. Execute the script with sudo privileges:

   ```bash
   sudo ./setup_lamp.sh
   ```

5. The script will guide you through the installation, including package installation and MySQL configuration. Follow the prompts to complete the setup.

## 4. Executing the Ansible Playbook

1. The Ansible playbook (`lamp_setup.yml`) is responsible for executing the `setup_lamp.sh` script on the "Slave" node and other tasks.

2. Run the Ansible playbook using the following command:

   ```bash
   ansible-playbook lamp_setup.yml
   ```

## 5. Verifying the Setup

1. After the Ansible playbook execution is complete, you can verify the setup by checking 
if the PHP application is accessible through the Slave node's IP address.

   ```bash
   curl http://your-slave-ip-address/
   ```

2. You should receive a response indicating successful access to the PHP application.

## 6. Customization

You can customize the setup by modifying the following:

- Variables in the `setup_lamp.sh` script to match your project's requirements.
- Configuration in the `Vagrantfile` to change the VM settings or add additional provisioning steps.
- Ansible playbook (`lamp_setup.yml`) to include more tasks or customize existing ones.

## 7. Troubleshooting

If you encounter issues during the setup, refer to the troubleshooting section in the README of the project repository. You can also seek assistance from the script's maintainer or the open-source community.

## 8. Conclusion

You've successfully set up a LAMP stack on two Ubuntu-based servers using Vagrant with Docker as the provider and Ansible automation. This environment is ready for web development and testing.
 If you have any questions or feedback, please feel free to reach out to me 

